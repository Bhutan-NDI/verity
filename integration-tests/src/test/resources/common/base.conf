include "akka.conf"
include "sms-client.conf"
include "lib-indy.conf"
include "lib-vcx.conf"
include "salt.conf"
include "secret.conf"
include "url-mapper-client.conf"
include "metrics.conf"
include "resource-usage-rule.conf"
include "wallet-storage.conf"
include "sms-server.conf"

verity {

  metrics {
    protocol {
      tags {
        uses-sponsor = true
        uses-sponsee = true
      }
    }
    activity-tracking {
      active-user {
        # Type=Duration -> Found at https://www.scala-lang.org/api/2.9.3/scala/concurrent/duration/Duration.html
        # This is a sliding window (+- timestamp) where the token is considered valid by Verity.
        # If expiration happens, requester will need to request a new token from their sponsor
        # Valid Units: `d, day, h, hour, min, minute, s, sec, second, ms, milli, millisecond, Âµs, micro, microsecond, ns, nano, nanosecond`
        # and their pluralized forms (for every but the first mentioned form of each unit, i.e. no "ds", but "days").
        time-windows = []
        # Monthly is not of type Duration so it can't go in the time-windows array. Monthly is handled a little differently in the code
        monthly-window = false
        enabled = false
      }

      active-relationships {
        # Type=Duration -> Found at https://www.scala-lang.org/api/2.9.3/scala/concurrent/duration/Duration.html
        # This is a sliding window (+- timestamp) where the token is considered valid by Verity.
        # If expiration happens, requester will need to request a new token from their sponsor
        # Valid Units: `d, day, h, hour, min, minute, s, sec, second, ms, milli, millisecond, Âµs, micro, microsecond, ns, nano, nanosecond`
        # and their pluralized forms (for every but the first mentioned form of each unit, i.e. no "ds", but "days").
        time-windows = []
        # Monthly is not of type Duration so it can't go in the time-windows array. Monthly is handled a little differently in the code
        monthly-window = false
        enabled = false
      }
    }
  }

  internal-api {
    # The verity setup and health related rest api resources (mostly starting with /agency/internal/... etc)
    # will only be callable from the list of "allowed-from-ip-addresses" (CIDR notation) below.
    # Note that one of the health related api resources shows configuration details, which may contain
    # sensitive information.
    #
    # If allowed-from-ip-addresses is undefined or an empty, by default all "site local" (10 dot, 127 dot,
    # and 172 dot addresses) and loopback intefaces (usually 127.0.0.1) will be allowed. If you add even one
    # CIDR address to the list, you must enumerate all addresses. In other words, if you add 1.2.3.4/32 to the
    # list and you also want all site local and loopback addresses to be allowed, you will need to add the
    # site local and loopback CIDR addresses to the list. The defaults are NOT included if the list is not
    # empty.
    allowed-from-ip-addresses = ["127.0.0.1/0"]
  }

  domain-url-prefix = "http://localhost:9000"
  domain-url-prefix = ${?VERITY_DOMAIN_URL_PREFIX}

  http {
    # the port to listen on for http requests, change as per environment/need
    port = 9000
    port = ${?VERITY_HTTP_PORT}
  }

  endpoint = {
    host = "localhost"
    host = ${?VERITY_ENDPOINT_HOST}

    port = ${verity.http.port}
    port = ${?VERITY_ENDPOINT_PORT}
  }

  dynamodb-journal {
    journal-table = "verity_akka_application"
    journal-table = ${?VERITY_DYNAMODB_JOURNAL_TABLE}
  }

  dynamodb-snapshot-store {
    snapshot-table = "verity_akka_snapshot_application"
    snapshot-table = ${?VERITY_DYNAMODB_SNAPSHOT_TABLE}
  }

  services {
    url-mapper-service {
      endpoint {
        port = 9001
        port = ${?URL_MAPPER_SERVICE_PORT}
      }
    }
  }

  lib-indy {
    ldedger {
      pool-name = ${?POOL_NAME}
    }
  }

  app-state-manager {
    state {
      draining {
        delay-before-leave = 0
        delay-between-status-checks = 1
        max-status-check-count = 5
      }
    }
  }

  dynamodb-common {
    # The service endpoint to connect to for the DynamoDB instance that
    # shall be used. Please refer to the AWS documentation for details.
    endpoint = "localhost:8000" # or where your deployment is
    endpoint = ${?DYNAMODB_ENDPOINT}
  }

  wallet-storage {
    read-host-ip = "0.0.0.0"
    read-host-ip = ${?WALLET_STORAGE_READ_HOST_IP}

    write-host-ip = "0.0.0.0"
    write-host-ip = ${?WALLET_STORAGE_WRITE_HOST_IP}
  }

  services {
    sms-service {
      endpoint {
        port = ${verity.http.port}
      }
    }
    url-mapper-service {
      endpoint {
        port = ${?URL_MAPPER_SERVICE_PORT}
      }
    }
  }

  msgs {
    conn-req-expiration-time-in-seconds = 600
  }

  rest-api {
    enabled = true
  }
}

akka {

  actor {
    //NOTE: below config is to test message serialization/deserialization in testing environment to catch any related issues early
    serialize-messages = on
    allow-java-serialization = off
  }

  remote {
    artery.canonical {
      # assuming you are NOT running more than one node on same vm/machine
      # if you are, then, you'll have to change below port to be unique per node on same vm/machine
      port = 2550
      port = ${?VERITY_AKKA_REMOTE_PORT}
    }
  }
  cluster {

    # seed nodes which bootstraps the akka cluster,
    # for one node cluster, it would contain its own information
    # for multi node cluster, it depends on us which one we want to configure as seed nodes
    # if you have more than one node in a cluster, than change 'localhost' in below seed nodes
    # to their ip addresses which this node can access to
    # replace 'localhost' as well with ip address if that seed nodes is not running on local vm/machine
    seed-nodes = [
      "akka://verity@localhost:"${akka.remote.artery.canonical.port}
      ${?VERITY_AKKA_CLUSTER_SEED_NODES_1}    # this is used to run cluster locally
      ${?VERITY_AKKA_CLUSTER_SEED_NODES_2}    # this is used to run cluster locally
      ${?VERITY_AKKA_CLUSTER_SEED_NODES_3}    # this is used to run cluster locally
      ${?VERITY_AKKA_CLUSTER_SEED_NODES_4}    # this is used to run cluster locally
      ${?VERITY_AKKA_CLUSTER_SEED_NODES_5}    # this is used to run cluster locally
    ]
  }
  management.http {
    enabled = N
  }
}


verity.services {
  push-notif-service {
    # mock cloud messaging
    mcm {
      send-messages-to-endpoint = true
    }
  }
}

kamon {
  # Disable features of kamon-system-metrics module that are enabled by default that we do not want
  system-metrics {
    # The sigar library is enabled by default. Disable it due to a core dump while loading/using the sigar library.
    # A fatal error has been detected by the Java Runtime Environment:
    #
    #  SIGSEGV (0xb) at pc=0x00007fa04cf4d311, pid=12147, tid=0x00007fa04d146700
    #
    sigar-enabled = false

    host {
      # Disable collecting all host-level metrics in hopes that the sigar library won't be loaded/used and cause the
      # aforementioned (above) SIGSEGV (core dump)
      enabled = no
    }
  }

  environment {
    service = "verity"
    service = ${?VERITY_KAMON_ENVIRONMENT_SERVICE}
  }

  status-page {
    # Controls port on which the status page embedded server will be listening.
    listen {
      port = 5260
      port = ${?VERITY_KAMON_STATE_PAGE_PORT}
    }
  }
}

verity {
  agent {
    authentication {

      # determines if this feature is by default available or not
      enabled: true

      # map of 'domain-id' and their authorized keys
      keys {
        # provided keys will be available to agent belonging to given DID as key
        # examples:
        # domain-id-1: ["key1", "key2"]
        # domain-id-2: ["key3", "key4"]
      }
    }
  }
}

verity {
  services {
    push-notif-service = {
      # mock cloud messaging, by default turned off, it is only used during integration test
      mcm {
        # this is only enabled for integration testing purposes to be able to test push notifications
        enabled: true
      }
    }
    url-shortener-service = {
      selected = "YOURLS"
      yourls {
        api-url = "http://localhost:8080/yourls-api.php"
        api-url = ${?YOURLS_API_URL}
        username = "yourlsuser"
        password = "yourlspass"
        timeout-seconds = 10
      }
    }
  }
}


verity.provisioning {
  sponsors = [
    {
      name = "test-sponsor"
      id = "test-sponsorabc123"
      keys = [{"verKey":"test-sponsor456def8910"}]
      endpoint = "test-sponsorgoogle.com"
      active = false
    },
    {
      name = "inactive-sponsor-name"
      id = "inactive-sponsor-id"
      keys = [{"verKey": "GJ1SzoWzavQYfNL9XkaJdrQejfztN4XqdsiV4ct3LXKL"}]
      endpoint = "localhost:3456/json-msg"
      active = false
    },
    {
      name = "evernym-test-sponsor"
      id = "evernym-test-sponsorabc123"
      keys = [{"verKey": "GJ1SzoWzavQYfNL9XkaJdrQejfztN4XqdsiV4ct3LXKL"}]
      endpoint = "localhost:3456/json-msg"
      active = true
    },
    {
      name = "00000000000000000000LocalSponsor"
      id = "00000000000000000000LocalSponsor"
      keys = [{"verKey": "3xKu8NAraRLVyyUocPiUhiN9muzYCmwky9QsWmjnA4wA"}]
      endpoint = ""
      active = true
    }
  ]
  sponsor-required = false
  sponsor-required = ${?REQUIRE_SPONSOR}
  token-window = 10 minute
  cache-used-tokens = true
}

verity.persistent-actor.base {
  //By commenting/uncommenting/modifying below configs
  // we can enable/disable snapshots for AgencyAgent and/or AgencyAgentPairwise actors
  // in integration and legacy integration tests

  AgencyAgent.snapshot {
    after-n-events = 10
    keep-n-snapshots = 1
    delete-events-on-snapshots = true
  }

  AgencyAgentPairwise.snapshot {
    after-n-events = 10
    keep-n-snapshots = 1
    delete-events-on-snapshots = true
  }
}