integration-test {

  # various integration test-environment configurations for different usages/purposes/specs
  environments {

    # default integration test environment configuration
    # other environments can be defined (as many as needed) and each or specific spec/test may specify (in test code)
    # which one it wants to use.
    default {

      participants: [
        {
          # defines an instance of verity. This string MUST be a key for the definitions in 'verity-instance-configs'
          instance: LegacyCAS
        }
        {
          instance: LegacyEAS

          # optionally, skds can be defined. The strings in this list MUST be a key for the definitions in sdk-configs
          sdks: [EntEdgeAgent1]
        }
      ]


      sdks: ["EntEdgeAgent1"]

      # optional, only needed if one or more instances in 'verity-instances' is remote
      # it should point to one of the keys defined in 'ledger-configs'
      ledger-config: "default"
    }

    vcx-only-spec {
      participants: [
        {
          instance: LocalCAS1
          sdks: [VcxClient1]
        }
      ]
      ledger-config: "default"
    }

    sdk-flow-spec {
      participants: [
        {
          instance: LocalCAS1
          sdks: [VcxClient1]
        }
        {
          instance: LocalVerity1
          sdks: [VeritySDK1]
        }
      ]
      ledger-config: "default"
    }

    multi-tenant-spec {
      participants: [
        {
          instance: LocalCAS1
          sdks: [VcxClient1]
        }
        {
          instance: LocalVerity1
          sdks: [VeritySDK1, VeritySDK2, VeritySDK3]
        }
      ]
      ledger-config: "default"
    }

    manual-sdk-flow-spec {
      participants: [
        {
          instance: Team1CAS
          sdks: [ManualSDK]
        }
        {
          instance: LocalVerity1
          sdks: [VeritySDK1]
        }
      ]
      ledger-config: "team1"
      timeout: 600 sec
    }

    devlab-sdk-flow-spec {
      participants: [
        {
          instance: DevlabCAS
          sdks: [VcxClient1]
        }
        {
          instance: DevlabVerity
          sdks: [DevlabVeritySDK]
        }
      ]
      ledger-config: "devlab"
      timeout: 300 sec
    }

    devrc-sdk-flow-spec {
      participants: [
        {
          instance: DevRcCAS
          sdks: [VcxClient1]
        }
        {
          instance: DevRcVAS
          sdks: [DevRcVeritySDK]
        }
      ]
      ledger-config: "devlab"
      timeout: 300 sec
    }

    multi-sdk-flow-spec {
      participants: [
        {
          instance: LocalCAS1
          sdks: [VcxClient1]
        }
        {
          instance: LocalVerity1
          sdks: [VeritySDK1]
        }
      ]
      ledger-config: "default"
    }
  }

  # various edge agent configurations
  # here is brief description of attributes of the json object
  #   type: defines the sdk-provider used for the SDK (eg. java, python, node, vcx, manual, etc)
  #   version: used by some sdk-provider to define what version of the SDK is used
  #   name: edge agent's name
  #   port: port where a http listener will be started on localhost
  #   endpoint: optional, only needed if any one verity instance is remote
  #                       if supplied it should be accessible from those remote instances
  #                                         for example: my.domain.com:80
  #                       if not supplied, default is: localhost:<listening-port>
  #   If the following values are supplied, we don't provision an agent. Instead we build a Verity
  #   SDK context using the seed.
  #   domain-did: Optional, Together with verkey, identifies the agent running in the VAS
  #   verkey: Optional, Together with the domain-did, identifies the agent running in the VAS
  #   seed: Optional, Used to build the Verity SDK context when the agent already exists.

  sdk-configs: {
    VeritySDK1: {
      type: "java",
      version: "0.1.7",
      name: "verity-sdk-1",
      port: 6001,
    }
    VeritySDK2: {
      type: "java",
      version: "0.1.7",
      name: "verity-sdk-2",
      port: 6002,
    }
    VeritySDK3: {
      type: "java",
      version: "0.1.7",
      name: "verity-sdk-3",
      port: 6003,
    }
    VcxClient1: {
      type: "vcx",
      name: "vcx-edge",
    }
    ManualSDK: {
      type: "manual",
      name: "connect.me manual sdk"
    }
    EntEdgeAgent1: {
      type: "java",
      name: "eas-edge-agent",
      port: 7002,
    }
  }

  # this is configuration of different verity instances which
  # may/will be referred in 'verity-instances' of an environment defined in 'environments' section above
  # here is a brief description of attributes of the instance json object
  #   name: instance's name
  #   setup: determines if the instance needed to be setup (and started) locally or not
  #   endpoint: endpoint to be send/shared with other domain
  #             if one or more instances in 'verity-instances' (defined in the environment above) is remote, then
  #               this endpoint MUST be supplied which is accessible from those remote instances
  #             else
  #               this is optional
  #   listening-port: required for local instances,
  #                   port where instance will start http listener on localhost
  #   seed: optional, only applicable for local instances
  #         if supplied, verity agent's key will be created based on that seed
  #   jdwp-port: optional, only applicable if remote debugging of a JVM application is needed
  #   message-tracking-enabled: optional, only applicable if message tracing/profiling is needed
  #   message-tracking-by-id: optional, "global" by default, but can be tracked by IP. What is tracked can be further
  #                           filtered by reqId, domainTrackingId, and relTrackingId. See https://docs.google.com/document/d/1iuVsDKhndywxBL1H876Lz_UjqSOsvxmuJ1hc6kQFx6s/edit?usp=sharing

  verity-instance-configs: {
    LegacyCAS: {
      name:"CAS1",
      app-type: "consumer",
      setup: true,
      listening-port: 9001,
      seed="00000000000000000000000000000CAS",
      jdwp-port: 5006,
      message-tracking-enabled: true,
      require-sponsor: true
    }

    LegacyEAS: {
      name:"EAS1",
      app-type: "enterprise",
      setup: true,
      listening-port: 9002,
      seed="00000000000000000000000000000EAS",
      jdwp-port: 5007,
      message-tracking-enabled: true,
      require-sponsor: true
    }

    LocalCAS1: {
      name:"CAS1",
      app-type: "consumer",
      setup: true,
      listening-port: 9001,
      seed="00000000000000000000000000000CAS",
      jdwp-port: 5006,
      message-tracking-enabled: true
    }

    LocalVerity1: {
      name:"VERITY1",
      app-type: "verity",
      setup: true,
      listening-port: 9003,
//      endpoint: "http://37a10d83ae2d.ngrok.io",
      seed="0000000000000000000000000000VAS1",
      jdwp-port: 5008,
      message-tracking-enabled: true
    }
  }

  # various ledger configurations for different environments
  ledger-configs: {

    # this default key configuration should be present
    default: {
      genesis-file-path: "target/genesis.txt"

      # both of these trustee information is needed if the 'test code' itself
      # does #a and/or #b:
      #   a) bootstrap the verity's DID to ledger (during local verity setup)
      #   b) bootstrap issuer's DID to ledger (during issuer setup)
      submitter-did: "Th7MpTaRZVRYnPiabds81Y"
      submitter-seed: "000000000000000000000000Steward1"
      submitter-role: "STEWARD"

      # Override the default indy-sdk runtime pool configuration
      # https://github.com/hyperledger/indy-sdk/blob/master/libindy/src/domain/pool.rs#L73-L75
      timeout: 20
      # https://github.com/hyperledger/indy-sdk/blob/master/libindy/src/domain/pool.rs#L77-L79
      extended-timeout: 60

      # Protocol version defaults to 1 if Pool.setProtocolVersion is not called
      protocol-version: 2
    }
  }

  # this is to ensure that none of the local instance's seed is same with any of remote instance's seed
  # else during setup of that local instance, it will accidentally override that remote instance's endpoint in the ledger
  # this is temporary way to at least avoid that situation, we'll have to find better way of handling it.
  # so, basically, set this to false only if:
  #  a) you are sure the genesis file is pointing to local ledger
  #  b) or none of the local instance's seed is colloding with any of the remote instance
  seed-conflict-check: true
}
