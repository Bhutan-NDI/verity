image: $EVERNYM_REGISTRY_HOST/dev/containers/build-verity:0f2dbf8d

variables:
  MASTER_PROJECT_ID: "327"
  indyNodeVersion: "1.12.3"
  sovtokenVersion: "1.0.8"
  TRIGGERAPI_URL_VERITY_RELEASE: "https://gitlab.corp.evernym.com/api/v4/projects/688/trigger/pipeline"
  # TRIGGERAPI_REF_VERITY_RELEASE: "auto-deploy"


.on-master: # job always runs for 'master', otherwise it manual
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master" && $CI_PROJECT_ID == $MASTER_PROJECT_ID'
      when: always
    - when: manual

.for-master: # job always runs for 'master' or merge requests to 'master', otherwise it manual
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master" && $CI_PROJECT_ID == $MASTER_PROJECT_ID'
      when: always
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" && $CI_PROJECT_ID == $MASTER_PROJECT_ID'
    - when: manual

stages:
  - check
  - test
  - package
  - publish
  - deploy

license-data-check:
  stage: check
  image: $EVERNYM_REGISTRY_HOST/dev/containers/ssh-git:latest
  script: ./cicd/license-date-check.sh
  only:
    refs:
      - master
      - tags
      - merge_requests
  tags:
    - docker-machine

.test:
  cache:
    paths:
      - $CI_PROJECT_DIR/.sbt/
      - $CI_PROJECT_DIR/.ivy2/
  stage: test
  before_script:
    - mkdir -p $CI_PROJECT_DIR/.sbt && cp -r ~/.sbt/* $CI_PROJECT_DIR/.sbt/.
  tags:
    - docker-machine
    - general-xlarge

unit-test:
  extends: .test
  only:
    refs:
      - master
      - tags
      - merge_requests
  script:
    - devops/scripts/test/docker-unit-tests $CI_PROJECT_DIR

.static-analysis: # This test don't work and is currently not providing value
  extends: .test
  only:
    refs:
      - master
      - tags
      - merge_requests
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - verity/target/scala-*/scapegoat-report
  script:
    - devops/scripts/test/docker-static-code-analysis $CI_PROJECT_DIR
  allow_failure: true # Eventually this will be removed and we will have a zero error/warning policy

.integration-common:
  extends: .test
  variables:
    # General vars
    MESSAGE_PROGRESS_TRACKING_ENABLED: "true"

    # For the integration tests to set up a usable bucket
    BLOB_BUCKET: "blob-bucket"
    BLOB_S3_ENDPOINT: "http://s3server:8000"

    # These are used by the s3 service in .integration jobs
    REMOTE_MANAGEMENT_DISABLE: 1
    ENDPOINT: "s3server"

    # Ledger Pool
    POOL_HOST: "indy-pool"
    TAA_ENABLE: "true"

    # For MYSQL docker container service
    MYSQL_ROOT_PASSWORD: "root"
    MYSQL_DATABASE: "wallet"
    MYSQL_USER: "msuser"
    MYSQL_PASSWORD: "mspassword"

    # For yourls service
    YOURLS_SITE: "http://yourls"
    YOURLS_USER: "yourlsuser"
    YOURLS_PASS: "yourlspass"
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - integration-tests/target/scalatest-runs
    when: always
  script:
    - devops/scripts/test/retrieve-genesis-txn
    - devops/scripts/s3server/s3_init.sh
    - devops/scripts/yourls/yourls_init.sh
    - devops/scripts/test/docker-integration-tests $CI_PROJECT_DIR
  services:
    - name: $EVERNYM_REGISTRY_HOST/dev/containers/indy-pool:${indyNodeVersion}_${sovtokenVersion}
      alias: indy-pool
    - name: $EVERNYM_REGISTRY_HOST/dev/containers/verity-mysql-wallet:288429c3
      alias: mysql
    - name: $EVERNYM_REGISTRY_HOST/dev/containers/verity-dynamodb:20b4ceda
      alias: dynamodb
    - name: zenko/cloudserver
      alias: s3server # use endpoint_url value of http://s3server:8000
      entrypoint: [ '/usr/src/app/docker-entrypoint.sh' ]
      command: [ 'yarn', 'start', 'mem_backend' ]
    - name: $EVERNYM_REGISTRY_HOST/dev/containers/yourls-mysql:2283cd0c
      alias: yourls

legacy:
  extends: .integration-common
  only:
    refs:
      - master
      - tags
      - merge_requests
  variables:
    TEST_TYPE: "Legacy"
    TEST_SCENARIOS: "scenario1, scenario2"

legacy-with-restart:
  extends: .integration-common
  only:
    refs:
      - master
      - tags
      - merge_requests
  variables:
    TEST_TYPE: "Legacy"
    TEST_SCENARIOS: "scenario1"
    TEST_RESTART_VERITY_RANDOMLY: "true"

integration:
  extends: .integration-common
  only:
    refs:
      - master
      - tags
      - merge_requests
  variables:
    TEST_TYPE: "Integration"

limits:
  extends: .integration-common
  only:
    refs:
      - master
      - tags
      - merge_requests
  variables:
    TEST_TYPE: "Limits"

.package-common:
  stage: package
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - verity/target/docker
      - verity/target/scala-2.12/verity-assembly-*.jar
      - verity/target/*.deb
    when: always
  cache:
    paths:
      - $CI_PROJECT_DIR/.sbt/
      - $CI_PROJECT_DIR/.ivy2/
  script:
    - cd $CI_PROJECT_DIR
    - sbt assembly
    - sbt verity/k8sDockerPackage
    - sbt debian:packageBin
  tags:
    - docker-machine
    - large

package:
  extends: .package-common
  only:
    refs:
      - master@dev/verity/verity

package-manual:
  extends: .package-common
  only:
    refs:
      - master
      - tags
      - merge_requests
  when: manual

.publish-common:
  stage: publish
  cache:
    paths:
      - $CI_PROJECT_DIR/.sbt/
      - $CI_PROJECT_DIR/.ivy2/
  tags:
    - docker-machine

.publish-common-debian:
  script:
    - cd $CI_PROJECT_DIR
    - export debianPackage=`ls verity/target/verity-application_*.deb`
    - curl -u $KRK_USERNAME:$KRK_PASSWORD --fail -X POST https://$KRK_HOST/repo/$KRK_DEV_REPO/upload -F file=@$debianPackage --cacert "$EVERNYM_CERTIFICATE"

publish-deb:
  extends:
    - .publish-common
    - .publish-common-debian
  dependencies:
    - package
  only:
    refs:
      - master@dev/verity/verity

publish-deb-manual:
  extends:
    - .publish-common
    - .publish-common-debian
  dependencies:
    - package-manual
  only:
    refs:
      - master
      - tags
      - merge_requests
  when: manual

.publish-common-docker:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # Make Kaniko trust Evernym's internal CA
    - cat "$EVERNYM_CERTIFICATE" >> /kaniko/ssl/certs/ca-certificates.crt
    # Move to pre-packaged docker directory
    - cd $CI_PROJECT_DIR/verity/target/docker
    - ls -lR
    # source args for container build
    - source ./args.env
    # establish kaniko's config file from gitlab-runner environment variables
    - >
      printf
      '{"auths":{"%s":{"username":"%s","password":"%s"}},"credHelpers":{"%s":"ecr-login"}}'
      $CI_REGISTRY
      $CI_REGISTRY_USER
      $CI_REGISTRY_PASSWORD
      $AWS_DEV_ECR_REGISTRY
      > /kaniko/.docker/config.json
    #- if [ "$CI_COMMIT_REF_NAME" == "master" ]; then DRY_RUN=""; else DRY_RUN="--no-push"; fi
    - >
      /kaniko/executor
      --build-arg LIBINDY_VERSION=$LIBINDY_VERSION
      --build-arg LIBMYSQLSTORAGE_VERSION=$LIBMYSQLSTORAGE_VERSION
      --build-arg EVERNYM_CERTIFICATE=$EVERNYM_CERTIFICATE
      --context .
      --destination $CI_REGISTRY_IMAGE:$VERITY_VERSION
      --destination $CI_REGISTRY_IMAGE:latest
      --destination $AWS_DEV_ECR_REGISTRY/verity:$VERITY_VERSION
      --destination $AWS_DEV_ECR_REGISTRY/verity:latest $DRY_RUN
  tags:
    - large

publish-docker:
  extends:
    - .publish-common
    - .publish-common-docker
  dependencies:
    - package
  only:
    refs:
      - master@dev/verity/verity

publish-docker-manual:
  extends:
    - .publish-common
    - .publish-common-docker
  dependencies:
    - package-manual
  only:
    refs:
      - master
      - tags
      - merge_requests
  when: manual

.deploy-common:
  stage: deploy
  script:
    - ls verity/target/verity-application*.deb
    - export debianPackage=`ls verity/target/verity-application*.deb`
    - >
      if [ ! -z "${debianPackage}" ]; then
        export VERITY_VERSION=`echo "$debianPackage" | cut -d'_' -f2`
      else
        /bin/false
      fi
    - curl
      --insecure
      --request POST
      --form token=$CI_JOB_TOKEN
      --form ref=$TRIGGERAPI_REF_VERITY_RELEASE
      --form "variables[VERITY_PACKAGE_VERSION]=$VERITY_VERSION"
      --form "variables[TARGET_ENV]=$TARGET_ENVIRONMENT"
      --form "variables[CI_PROJECT_ID_SOURCE]=$CI_PROJECT_ID"
      --form "variables[UPSTREAM_BRANCH]=$CI_COMMIT_REF_NAME"
      --form "variables[MERGE_FORK_PROJECT_ID]=$MERGE_FORK_PROJECT_ID"
      --form "variables[MERGE_FORK_BRANCH]=$MERGE_FORK_BRANCH"
      $TRIGGERAPI_URL_VERITY_RELEASE
  tags:
    - docker-machine

deploy-manually-team1:
  extends: .deploy-common
  variables:
    TARGET_ENVIRONMENT: 'team1'
    TRIGGERAPI_REF_VERITY_RELEASE: $TARGET_ENVIRONMENT
    MERGE_FORK_PROJECT_ID: "766"
    MERGE_FORK_BRANCH: $TARGET_ENVIRONMENT
  when: manual
  only:
    refs:
      - master@dev/verity/verity

.deploy-manually-team2:
  extends: .deploy-common
  variables:
    TARGET_ENVIRONMENT: 'team2'
  when: manual

deploy-dev-rc: # default branch for automatic deployment verity master to dev-rc
  extends:
    - .deploy-common
  variables:
    TARGET_ENVIRONMENT: 'dev-rc'
    TRIGGERAPI_REF_VERITY_RELEASE: $TARGET_ENVIRONMENT
    MERGE_FORK_PROJECT_ID: "766"
    MERGE_FORK_BRANCH: $TARGET_ENVIRONMENT
  only:
    refs:
      - master@dev/verity/verity

deploy-manually-dev-rc: # special branch for manual deployment verity master with control-repo changes to dev-rc: MERGE_FORK_PROJECT_ID and MERGE_FORK_BRANCH must be provided in job UI
  extends:
    - .deploy-common
  variables:
    TARGET_ENVIRONMENT: 'dev-rc'
    TRIGGERAPI_REF_VERITY_RELEASE: $TARGET_ENVIRONMENT
    MERGE_FORK_PROJECT_ID: "766"
    MERGE_FORK_BRANCH: $TARGET_ENVIRONMENT
  when: manual
  only:
    refs:
      - master@dev/verity/verity
