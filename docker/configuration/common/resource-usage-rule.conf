verity {

  resource-usage-rules {

    apply-usage-rules = true

    //if set true, all buckets will be persisted when changes happens
    //if set false, individually configured buckets will get persisted
    persist-all-usage-states = false

    //if set, after every configured number of events,
    // it will store snapshot of all resource usages
    snapshot-after-events = 100

    usage-rules {

      default {

        //this is to control different endpoint usages
        endpoint {

          //when no specific endpoint matches, this will be applied
          default {
            300: {"allowed-counts": 100, "violation-action-id": 50}
            600: {"allowed-counts": 200, "violation-action-id": 70}
            1200: {"allowed-counts": 400, "violation-action-id": 90}
          }

          POST_agency_msg {
            300: {"allowed-counts": 200, "violation-action-id": 50}
            600: {"allowed-counts": 400, "violation-action-id": 70}
            1200: {"allowed-counts": 600, "violation-action-id": 90}
          }

        }

        //this is to control internal messages exchanged via one or different endpoints
        message {

          default {
            300: {"allowed-counts": 200, "violation-action-id": 50}
            600: {"allowed-counts": 400, "violation-action-id": 70}
            1200: {"allowed-counts": 600, "violation-action-id": 90}
          }

          "connecting/CREATE_MSG_connReq" {
            300: {"allowed-counts": 5, "violation-action-id": 50}
            600: {"allowed-counts": 20, "violation-action-id": 70}
            1800: {"allowed-counts": 50, "violation-action-id": 90}
            -1: {"allowed-counts": 100, "violation-action-id": 70, "persist-usage-state": true}
          }
        }
      }

    }

    # supported instructions as of now are "log-msg", "warn-resource", "block-resource" and "block-entity"
    violation-action {

      # suspicious, log it
      50 {
        log-msg: {"level": "info"}
        warn-resource: {"entity-types": "ip", "period": 600}
      }

      # log it and block only resource
      70 {
        log-msg: {"level": "info"}
        warn-entity: {"entity-types": "ip", "period": 1200}
        block-resource: {"entity-types": "ip", "period": 600}
      }

      # log and block user from using any api (-1 indicates blocked indefinitely)
      90 {
        log-msg: {"level": "info"}
        block-entity: {"entity-types": "ip", "period": -1}
      }

    }

    # assign tokens to a rule which should be applied to it
    # token can be client ip addresses or special tokens assigned to them
    rule-to-tokens {
      default: []
    }

    # tokens you want to configure as blacklisted (doesn't matter from which ip address those requests are coming)
    blacklisted-tokens = []

    # tokens you want to configure as whitelisted (doesn't matter from which ip address those requests are coming)
    # this would be specially useful when you want to trust some remote agent
    # for example, for enterprise agent, you'll expect messages from consumer agent and vice versa
    # so you can put those ip address in this config so that they doesn't get blocked unnecessarily
    whitelisted-tokens = []

  }
}
