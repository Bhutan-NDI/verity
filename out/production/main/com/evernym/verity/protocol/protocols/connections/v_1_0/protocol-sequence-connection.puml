@startuml

Title Protocol for Connection (Aries RFC 0160)

skinparam sequenceArrowThickness 2

participant "Ledger" as l

box <font color=CornflowerBlue>Invitee
  participant "Controller" as c1
  participant "Protocol Instance" as p1
end box

box <font color=CornflowerBlue>Inviter
  participant "Protocol Instance" as p2
  participant "Controller" as c2
end box

note over c1,c2 #white
    <b>Visual Cues:
    *All messages are <b>bolded</b>.
    *Participants are assigned roles early in the protocol lifecycle.
    **Participants are not represented directly, rather as Protocol Roles.
    *Protocol Roles are indicated with <b><font color=cornflowerblue>Cornflower Blue text</font></b>.
    *Protocol messages are indicated with bolded text and <b><font color=red>Red lines</font></b>.
    *Control messages are indicated with bolded text and <b><font color=blue>Blue lines</font></b>.
    *Signal messages are indicated with bolded text and <b><font color=darkorange>Dark Orange lines</font></b>.
    *Events are indicated with bolded text and <b><font color=green>Green self-arrows</font></b>.
    *States are indicated with <b><font color=purple>Purple text</font></b> as results of events.
    **Events result in state changes; the only way a state change happens is with an event.
    **This is indicated with a thick arrow from event to state (<b>Event</b> ⮕ <b><font color=purple>State</font></b>).end note
end note

autonumber

alt if Invitee has an SSI enabled app
  note over c1,p1
  Enters the invitation in the app
  end note

else Pastes the invitation URL in the browser
  note over c1,p1
  The URL takes the user to an app store/play store 
  from where he downloads the app.
  end note

else has other mechanisms to get the app
  note over c1,p1
  Question: Is this central to the sequence diagram?
  There can be many ways to get an app.
  end note

end alt

note over c1
uses 'relationship' protocol to provision new pairwise keys
(internally it will create new user agent pairwise actor)
all below messages will be targeted for that new pairwise actor
end note

p1 <-[#blue] c1: <b>ValidateInviteURL</b>(invitationMsg: base64URL, threadId: ThreadId)

p1 [#green]-> p1:  <b>MyRole ⮕ <font color=purple>Initialized \n my role: <b><font color=CornflowerBlue>Invitee\ntheir role: <b><font color=CornflowerBlue>Inviter

alt if invite URL is valid
p1 [#green]-> p1: <b>ValidInviteReceived ⮕ <font color=purple>Invited

alt if invitation with DID
c1 <-[#darkorange] p1: <b>ValidInviteWithDID</b>(invite: Invitation)
l <-[#teal] p1: <b>GetDIDDoc(did)</b> \n Currently there is no DID Doc support so get endpoint stored using ATTRIB \n The protocol will validate the received DID info and send a signal for valid or invalid info.
else invitation with keys and endpoint
c1 <-[#darkorange] p1: <b>ValidInviteWithKey</b>(invite: Invitation)
end alt

else if invite URL is invalid
p2 <-[#red] p1: <b>ProblemReport</b>(problem-code="invalid_invitation", explain="")
c1 <-[#darkorange] p1: <b>InvalidInvite</b>(invite: base64URL)
c2 <-[#darkorange] p2: <b>InvalidInvite</b>(invite: base64URL)
note over c1,p1 #pink
A potential end of protocol here due to a invalid invitation
end note
end alt 

group if declining invitation

p1 <-[#blue] c1: <b>DeclineInvitation</b>(problem_code="invitation_declined", explain: str)

p2 <-[#red] p1: <b>ProblemReport</b>(problem-code="invitation_declined", explain="")\n The error code "invitation_declined" is not part of RFC and should \n be submitted in a PR

c1 <-[#darkorange] p1: <b>InvitationDeclined</b>(error: ProblemReport)

c2 <-[#darkorange] p2: <b>InvitationDeclined</b>(error: ProblemReport)
note over c2,p2
the Inviter should examine the error and decide to resend 
the same invite, a modified invite or not send invite at all.
If the invite is sent again, this protocol is restarted.
end note

end

note over c2,p2 #pink
A potential end of protocol here due to a declined invitation
end note

note over c2,c1
Assuming Invitee has accepted
end note

note over c2,c1
If during processing connection request, an un-handlable error occurs, then a ProblemReport with error code "request_processing_error" must be returned by Invitor and handled by Invitee.
end note

p1 <-[#blue] c1: <b>Accept</b>
p1 [#green]-> p1: <b>Accepted ⮕ <font color=purple>Accepted

note over p1,p2
this message should reach to the user agent pairwise actor
and then launch p2 from there.
end note
p1 [#red]-> p2: <b><font color=red>ConnectionRequest</b>
c1 <-[#darkorange] p1: <b>ConnectionReqSent</b>(ConnectionRequest)

group connection request is invalid
c2 <-[#darkorange] p2: <b>InvalidConnectionReq</b>(request)
p2 [#red]-> p1: <b>ProblemReport</b>\n(problem-code="request_not_accepted", explain="")
c1 <-[#darkorange] p1: <b>ConnectionReqDeclined</b>(error_msg: json) \n The invitee can resend the connection \n request if he can fix the error.
end

note over c2,p2 #pink
A potential end of protocol here due to a declined connection request
end note

note over c2,c1
Assuming connection request is valid
end note

note over c2,c1
If during processing connection response, an un-handlable error occurs, then it is desirable to send a ProblemReport with error code "response_processing_error" must be returned by Invitor and handled by Invitee.
end note

p2 [#green]-> p2: <b>ConnectionRequested(req: ConnectionReq) ⮕ <font color=purple>Requested
c2 <-[#darkorange] p2: <b>ConnectionRequestReceived</b>(label: str, connection: Connection)
p2 <-[#blue] c2: <b>SendConnectionResp</b>
p2 [#green]-> p2: <b>ConnectionResponded ⮕ <font color=purple>Responded(Relationship)

note over p1,p2
this message should reach to the user agent pairwise actor
and then launch p1 (existing instance) from there.
end note

p2 [#red]-> p1: <b>ConnectionResponse</b>(connection~sig: \nconnection: (DID, DIDDoc), sig)
c2 <-[#darkorange] p2: <b>ConnectionRespSent</b>(ConnectionResponse)

alt if connection response is valid
p1 [#green]-> p1: <b>ConnectionRespReceived ⮕ <font color=purple>Complete(Relationship)

p2 <-[#red] p1: <b>Ack</b>(status: "OK")

c1 <-[#darkorange] p1: <b>Complete</b>(did_doc)
p2 [#green]-> p2: <b>AckReceived ⮕ <font color=purple>Complete(Relationship)
c2 <-[#darkorange] p2:<b>Complete</b>

else connection response is invalid
p1 [#darkorange]-> c1: <b>ConnectionRespInvalid</b>(problem-code: "response_not_accepted", \n explain)
p1 [#red]-> p2: <b>ProblemReport</b>\n(problem-code="response_not_accepted", explain="")
c2 <-[#darkorange] p2: <b>ConnectionRespDeclined(error_msg: json) \n The invitor can resend the connection \n response if he can fix the error.

end alt

@enduml