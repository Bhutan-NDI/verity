#
# This has been broken by moving location of docker containers around
#
#
#
#version: '3.5'
#networks:
#  dev_network:
#    name: agency_network
#    driver: bridge
#    ipam:
#      config:
#        - subnet: 172.18.0.0/24
#services:
#  agency:
#    build:
#      context: .
#      dockerfile: dockerfiles/agency.dockerfile
#      args:
#        # You should run `uid=$(id -u) docker-compose up` or the equivalent when using using this docker-compose file
#        # See https://docs.docker.com/compose/compose-file/#args for details.
#        #
#        # Override the following build arg if your user ID is not 1000 on your docker host. The 'sovrin' user will be
#        # created in the 'agency' service/container using the following uid. The user ID of the sovrin
#        # user in the 'agency' container needs to match the user ID that owns this 'agency' project/clone, which will be
#        # mounted to /src/agency in the 'agency' container.
#        #
#        # The dockerfiles/agency.dockerfile defaults uid to uid=1000, but to allow you to override that using this docker-compose
#        # file the following must be defined here with the same default value. Leaving it blank "- uid" vs "- uid=1000"
#        # is not an option.
#        - uid=1000
#      network: host
#    container_name: agency
#    # Defining 'build' and 'image' for a service effectively tags containers
#    # with what is defined under the 'image' attribute. See
#    # https://docs.docker.com/compose/compose-file/#image for details.
#    image: agency_test
#    networks:
#      dev_network:
#        ipv4_address: 172.18.0.10
#    ports:
#      # Expose remote debug and/or other ports for both consumer and enterprise agencies!
#      # Consumer Agent JVM debug port - Add "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005" to the
#      # java command.
#      # java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 \
#      #      -cp /src/agency/consumer/target/scala-2.12/consumer-agent-assembly-0.4.0+43409916.dd5438c.jar:/src/agency/integration-tests/target/scala-2.12/integration-tests-assembly-0.1.jar:/src/agency/integration-tests/src/test/resources/consumer \
#      #      com.evernym.verity.Main >> /src/agency/integration-tests/src/test/consumerVerityConsole.log 2>&1 &
#      - "5005:5005"
#      # Enterprise Agent JVM debug port - Add "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006" to the
#      # java command.
#      # java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006 \
#      #      -cp /src/agency/enterprise/target/scala-2.12/enterprise-agent-assembly-0.4.0+43409916.dd5438c.jar:/src/agency/integration-tests/target/scala-2.12/integration-tests-assembly-0.1.jar:/src/agency/integration-tests/src/test/resources/enterpriseAgency \
#      #      com.evernym.verity.Main >> /src/agency/integration-tests/src/test/enterpriseAgencyConsole.log 2>&1 &
#      - "5006:5006"
#      - "9001"
#      - "2551"
#      - "2552"
#    volumes:
#     # Mount the user's home directory so sbt can cache dependencies.
#     - ../../agency:/src/agency:rw
#    # TODO: decide if the following depends on should be uncommented.
#    # The agency container only depends on dynamodb, mysql, and indy-pool when running integration tests.
#    #depends_on:
#    # - dynamodb
#    # - mysql
#    # - indy-pool
#    command: ${CMD}
#  dynamodb:
#    build:
#      context: .
#      dockerfile: dockerfiles/dynamodb.dockerfile
#      network: host
#    container_name: dynamodb
#    # Defining 'build' and 'image' for a service effectively tags containers
#    # with what is defined under the 'image' attribute. See
#    # https://docs.docker.com/compose/compose-file/#image for details.
#    image: agency_dynamodb
#    networks:
#      dev_network:
#        ipv4_address: 172.18.0.7
#    # TODO: Expose remote debug and/or other ports?
#    ports:
#     - "8000"
#    volumes:
#     - ../devops/scripts:/src/scripts:ro
#    command: ["sh", "-c", "/src/scripts/dynamodb/clean-setup.sh && echo 'dynamodb server setup done !!!' && sleep 10 && /src/scripts/dynamodb/stop.sh && /usr/bin/supervisord"]
#  mysql:
#    build:
#      context: .
#      dockerfile: dockerfiles/mysql.dockerfile
#      network: host
#    container_name: mysql
#    # Defining 'build' and 'image' for a service effectively tags containers
#    # with what is defined under the 'image' attribute. See
#    # https://docs.docker.com/compose/compose-file/#image for details.
#    image: agency_mysql
#    networks:
#      dev_network:
#        ipv4_address: 172.18.0.8
#    # TODO: Expose remote debug and/or other ports?
#    ports:
#     - "3306"
#    volumes:
#     - ../devops/scripts:/src/scripts:ro
#    command: ["sh", "-c", "chown -R mysql:mysql /var/lib/mysql && /etc/init.d/mysql restart && /src/scripts/wallet-storage-mysql/docker-mysql-setup.sh && echo 'mysql server setup done !!!' && /usr/bin/supervisord"]
#  indy-pool:
#    build:
#      context: .
#      dockerfile: dockerfiles/indy-pool.dockerfile
#      args:
#        # You should run `uid=$(id -u) docker-compose up` or the equivalent when using using this docker-compose file
#        # See https://docs.docker.com/compose/compose-file/#args for details.
#        #
#        # Override the following build arg if your user ID is not 1000 on your docker host. The 'sovrin' user will be
#        # created in the 'agency' service/container using the following uid. The user ID of the sovrin
#        # user in the 'agency' container needs to match the user ID that owns this 'agency' project/clone, which will be
#        # mounted to /src/agency in the 'agency' container.
#        #
#        # The dockerfiles/indy-pool.dockerfile defaults uid to uid=1000, but to allow you to override that using this docker-compose
#        # file the following must be defined here with the same default value. Leaving it blank "- uid" vs "- uid=1000"
#        # is not an option.
#        - uid=1000
#        # Override the pool_ip used to generate the genesis transaction file to use the static ip for the indy-pool
#        # container.
#        - pool_ip=172.18.0.9
#      network: host
#    #environment:
#      #- pool_ip=172.18.0.9
#    container_name: indy-pool
#    # Defining 'build' and 'image' for a service effectively tags containers
#    # with what is defined under the 'image' attribute. See
#    # https://docs.docker.com/compose/compose-file/#image for details.
#    image: agency_indy_pool
#    networks:
#      dev_network:
#        ipv4_address: 172.18.0.9
#    # TODO: Expose remote debug and/or other ports?
#    ports:
#     - "9701-9708"
#    volumes:
#     - ../common:/src/common:rw
