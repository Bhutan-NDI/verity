verity {

  metrics {
    protocol {
      tags {
        uses-sponsor = true
        uses-sponsee = true
      }
    }
    activity-tracking {
      active-user {
        # Type=Duration -> Found at https://www.scala-lang.org/api/2.9.3/scala/concurrent/duration/Duration.html
        # This is a sliding window (+- timestamp) where the token is considered valid by Verity.
        # If expiration happens, requester will need to request a new token from their sponsor
        # Valid Units: `d, day, h, hour, min, minute, s, sec, second, ms, milli, millisecond, Âµs, micro, microsecond, ns, nano, nanosecond`
        # and their pluralized forms (for every but the first mentioned form of each unit, i.e. no "ds", but "days").
        time-windows = []
        # Monthly is not of type Duration so it can't go in the time-windows array. Monthly is handled a little differently in the code
        monthly-window = false
        enabled = false
      }

      active-relationships {
        # Type=Duration -> Found at https://www.scala-lang.org/api/2.9.3/scala/concurrent/duration/Duration.html
        # This is a sliding window (+- timestamp) where the token is considered valid by Verity.
        # If expiration happens, requester will need to request a new token from their sponsor
        # Valid Units: `d, day, h, hour, min, minute, s, sec, second, ms, milli, millisecond, Âµs, micro, microsecond, ns, nano, nanosecond`
        # and their pluralized forms (for every but the first mentioned form of each unit, i.e. no "ds", but "days").
        time-windows = []
        # Monthly is not of type Duration so it can't go in the time-windows array. Monthly is handled a little differently in the code
        monthly-window = false
        enabled = false
      }
    }
  }

  http {
    # the port to listen on for http requests, change as per environment/need
    port = 9000
    port = ${?VERITY_HTTP_PORT}
  }

  endpoint = {
    host = "localhost"
    host = ${?VERITY_ENDPOINT_HOST}

    port = ${verity.http.port}
    port = ${?VERITY_ENDPOINT_PORT}
  }

  msgs {
    conn-req-expiration-time-in-seconds = 600
  }

  rest-api {
    enabled = true
  }

  eventing {

    # event-source emits published events
    # the `basic-source` is verity provided basic eventing infrastructure
    # it should be only used for development/poc purposes only (NON production env)
    event-source = "verity.eventing.basic-source"

    # event-sink takes events to be published
    # sink for the events to be produced
    # the `basic-sink` is verity provided basic eventing infrastructure
    # it should be used for development/poc purposes only (NON production env)
    event-sink = "verity.eventing.basic-sink"

    # basic-store provides in memory event storage (TopicMsgStore actor)
    basic-store {

      # the basic store endpoint handler listens on below given port on each node
      # and when it receives events to be published, it sends it to sharded topic actor
      http-listener {
        host = "localhost"
        port = 8900
        port = ${?VERITY_BASIC_EVENT_STORE_PORT}
      }
    }

    basic-source {
      builder-class = "com.evernym.verity.eventing.adapters.basic.consumer.BasicConsumerAdapterBuilder"
      id = "verity"

      topics = ["public.event.ssi.endorsement", "public.event.ssi.endorser"]

      # event consumer's webhook where topic actor will send published events
      http-listener {
        host = "localhost"
        port = 8901
        port = ${?VERITY_BASIC_CONSUMER_PORT}
      }
    }

    basic-sink {
      builder-class = "com.evernym.verity.eventing.adapters.basic.producer.BasicProducerAdapterBuilder"
    }
  }
}

kamon {
  # Disable features of kamon-system-metrics module that are enabled by default that we do not want
  system-metrics {
    # The sigar library is enabled by default. Disable it due to a core dump while loading/using the sigar library.
    # A fatal error has been detected by the Java Runtime Environment:
    #
    #  SIGSEGV (0xb) at pc=0x00007fa04cf4d311, pid=12147, tid=0x00007fa04d146700
    #
    sigar-enabled = false

    host {
      # Disable collecting all host-level metrics in hopes that the sigar library won't be loaded/used and cause the
      # aforementioned (above) SIGSEGV (core dump)
      enabled = no
    }
  }

  environment {
    service = "verity"
    service = ${?VERITY_KAMON_ENVIRONMENT_SERVICE}
  }

  status-page {
    # Controls port on which the status page embedded server will be listening.
    listen {
      port = 5260
      port = ${?VERITY_KAMON_STATE_PAGE_PORT}
    }
  }

  prometheus.embedded-server {
    hostname = 0.0.0.0
    port = ${?VERITY_KAMON_PROMETHEUS_PORT}
  }
}

verity {
  services {
    # url-shortener-service = {
    #   selected = "com.evernym.verity.urlshortener.YOURLSSvc"
    #   yourls {
    #     host = "localhost"
    #     host = ${?YOURLS_HOST}
    #     port = "8080"
    #     port = ${?YOURLS_PORT}
    #     api-url = "http://"${verity.services.url-shortener-service.yourls.host}":"${verity.services.url-shortener-service.yourls.port}"/yourls-api.php"
    #     username = "yourlsuser"
    #     password = "yourlspass"
    #   }
    # }
    url-shortener-service = {
      # Path to URLShortenerAPI class to be used (YOURLSSvc is available if configured)
      # selected = ""
      #selected = "com.evernym.verity.urlshortener.YOURLSSvc"
      selected = "com.evernym.verity.urlshortener.S3ShortenerSvc"

      # s3 shortener configuration
      s3-shortener {
        url-prefix = "https://sho.rt/"
        bucket-name = "dev-s3-url-shortener"
        id-length = 8    # length of short id suffix
        retry-count = 3  # number of retries in case of error

        # here we may override configuration for storage-service
        config-overrides {
          aws {
            region {
              default-region = "ap-southeast-1"
            }
          }
        }
      }
    }
  }
}

verity.messages.limits {
    issue-credential {
          packed-msg-limit = 182000
          rest-limit = 182000
    }

    committedanswer {
            packed-msg-limit = 170000
            rest-limit = 170000
    }

    present-proof {
      packed-msg-limit = 293700
      rest-limit = 293700
    }
}

verity {
  draining {
    //maximum check attempts to ensure draining state is communicated
    max-check-count = 1

    //how frequently it should check to confirm if draining state is communicated back to LB
    check-interval = 1 s

    //how much time to wait (to serve existing received requests) before letting service-unbind
    wait-before-service-unbind = 0 s
  }
}
# Needed for CAS?
verity.blob-store {
  bucket-name = "dev-cas-blob-store"
  storage-service = "com.evernym.verity.storage_services.aws_s3.S3AlpakkaApi"
  local-store-path = ""
}
# Needed for CAS?
alpakka.s3 {

  buffer = "memory"

  aws {
    credentials {
      provider = dynamic

      access-key-id = ""
      access-key-id = ${?S3_ACCESS_KEY_ID}

      secret-access-key = ""
      secret-access-key = ${?S3_SECRET_KEY}
    }

    region {
      provider = static
      default-region = "ap-southeast-1"
    }
  }
  # access-style = path
  # endpoint-url = "http://localhost:8001"
  # endpoint-url = ${?BLOB_S3_ENDPOINT}
}