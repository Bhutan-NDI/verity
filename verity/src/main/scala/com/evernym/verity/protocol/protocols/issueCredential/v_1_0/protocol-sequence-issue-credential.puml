@startuml

Title Protocol for Issue Credential (Aries RFC 36)

skinparam sequenceArrowThickness 2

participant "Ledger" as l

box <font color=CornflowerBlue>Issuer
  participant "Controller" as c1
  participant "Protocol Instance" as p1
end box


box <font color=CornflowerBlue>Holder
  participant "Protocol Instance" as p2
  participant "Controller" as c2
end box

note over c2,c1 #white
    <b>Visual Cues:
    *All messages are <b>bolded</b>.
    *Participants are assigned roles early in the protocol lifecycle.
    **Participants are not represented directly, rather as Protocol Roles.
    *Protocol Roles are indicated with <b><font color=cornflowerblue>Cornflower Blue text</font></b>.
    *Protocol messages are indicated with bolded text and <b><font color=red>Red lines</font></b>.
    *Control messages are indicated with bolded text and <b><font color=blue>Blue lines</font></b>.
    *Signal messages are indicated with bolded text and <b><font color=darkorange>Dark Orange lines</font></b>.
    *Events are indicated with bolded text and <b><font color=green>Green self-arrows</font></b>.
    *States are indicated with <b><font color=purple>Purple text</font></b> as results of events.
    **Events result in state changes; the only way a state change happens is with an event.
    **This is indicated with a thick arrow from event to state (<b>Event</b> ⮕ <b><font color=purple>State</font></b>).end note
end note


autonumber

opt if Propose \n Proposal is an optional step and used for negotiation \n Question: Should the Propose Credential <-> Offer credential \n be wrapped in a "loop" with a "break" when offer accepted or error
p2 <-[#blue] c2: <b>Propose</b>(credential_proposal=jsonld("attributes"={name, mime-type, value}, ..repeat), comment: str, \nschema_id: Option[str], cred_def_id: Option[str])
p2 [#green]-> p2: <b>CredentialProposed ⮕ <font color=purple>Proposed\nmy role: <b><font color=CornflowerBlue>Holder\ntheir role: <b><font color=CornflowerBlue>Issuer

p2 [#red]-> p1: <b>ProposeCredential</b>(credential_proposal=jsonld("attributes"={name, mime-type, value}, ..repeat), \ncomment, schema_id, cred_def_id)

p2 [#darkorange]-> c2: <b>CredentialProposalSent</b>(credential_proposal=jsonld("attributes"={name, mime-type, value}, ..repeat), \ncomment, schema_id, cred_def_id)

p1 [#green]-> p1: <b>CredentialProposed ⮕ <font color=purple>Proposed\nmy role: <b><font color=CornflowerBlue>Issuer\ntheir role: <b><font color=CornflowerBlue>Holder
p1 [#darkorange]-> c1: <b>CredentialProposalRecvd</b>(credential_proposal=jsonld("attributes"={name, mime-type, value}, ..repeat), comment: str, \nschema_id: Option[str], cred_def_id: Option[str])

alt issuer wants to issue credential or \n suggest a change in the proposed credential.
note over c2,p2
Jump to the Offer Credential sequence described below
end note

else issuer does not want to issue and send error instead
p1 <-[#blue] c1: <b>DeclineProposal</b>(problem_code="decline_proposal", explain: str)
p2 <-[#red] p1: <b>ProblemReport</b>(problem_code="unacceptable_proposal", explain)
p1 [#darkorange]-> c1: <b>DeclinedProposal</b>
p2 [#green]-> p2: <b>DeclinedProposal ⮕ <font color=purple>ProposalDeclined
c2 <-[#darkorange] p2: <b>DeclinedProposal</b>(error: ProblemReport)

end alt
end 

alt if Issuer offers credential
p1 <-[#blue] c1: <b>Offer</b>(credential_preview=jsonld("attributes"={name, mime-type, value}, ..repeat), comment: str, \nschema_id: Option[str], cred_def_id: Option[str]), \noffers_attach: array[Attachment: {@id, mime-type, data:{base64: (schema_id, cred_def_id, nonce, \n key_correctness_proof)}}], comment: str), "attachment" contents specified for Indy ledgers and comes from result of \n `indy_issuer_create_credential_offer`, it might differ for other ledgers. The offer will indicate whether issuer wants to issue holder's desired \n credential or a modified one.
p1 [#green]-> p1: <b>CredentialOffered ⮕ <font color=purple>Offered

p2 <-[#red] p1: <b>OfferCredential</b>(credential_preview, offers~attach, comment)\n credential_preview and offers_attach have same data as issuer's control message for sending offer.
p2 [#green]-> p2: <b>CredentialOffered ⮕ <font color=purple>Offered
p2 [#darkorange]-> c2: <b>CredentialOfferRecvd</b>(credential_preview=jsonld("attributes"={name, mime-type, value}, ..repeat), \noffers_attach: array[Attachment: {@id, mime-type, data:{base64: (schema_id, cred_def_id, nonce, \n key_correctness_proof)}}], comment: str)

alt if offered credential is acceptable
note over c2,p2
Jump to the Request Credential sequence described below
end note

else Propose new Credential
note over c2,p2
Jump to the Propose Credential sequence described above
TODO: If a "loop" is used, use a "break" here
end note

end alt

else if holder requests credential
p2 <-[#blue] c2: <b>Request</b>(comment: str, \n requests_attach: array[Attachment: {@id, mime-type, data:{base64: (prover_did, cred_def_id, \n blinded_ms, blinded_ms_correctness_proof, nonce)}}]) \n For indy, the attachment comes from result of `indy_prover_create_credential_req`
p2 [#green]-> p2: <b>CredentialRequested ⮕ <font color=purple>Requested

p2 [#red]-> p1: <b>RequestCredential</b>(comment, requests~attach)\n requests_attach has the same structure as the holder's previous control message.

p2 [#darkorange]-> c2: <b>CredentialRequestSent

p1 [#green]-> p1: <b>CredentialRequested ⮕ <font color=purple>Requested
p1 [#darkorange]-> c1: <b>Requested</b>(comment: str, requests_attach: array[Attachment])\n requests_attach has the same structure as the received protocol message RequestCredential.

group if credential request is unacceptable
p1 <-[#blue] c1: <b>Decline</b>(problem_code="unacceptable_request", explain: str)
p2 <-[#red] p1: <b>ProblemReport</b>(problem_code="unacceptable_request", explain)
p1 [#darkorange]-> c1: <b>DeclinedCredentialRequest</b>
p2 [#green]-> p2: <b>CredentialRequestDeclined ⮕ <font color=purple>RequestDeclined
c2 <-[#darkorange] p2: <b>DeclinedCredentialRequest</b>(error: ProblemReport) \n The holder can resend the request after \n making desired changes
end

note over c2,c1
Assuming credential request is acceptable to the Issuer
end note

p1 <-[#blue] c1: <b>Issue</b>(comment: str, credentials_attach: array[Attachment: {@id, mime-type, \n data:{base64: (schema_id, cred_def_id, rev_reg_def_id, values, signature, signature_correctness_proof)}}]) \n For Indy, the attachment data comes from the result of `indy_issuer_create_credential
p1 [#green]-> p1: <b>IssuedCredential ⮕ <font color=purple>Issued

alt if on demand issuance
l <-[#teal] p1: <b>UpdateRevReg</b>Update revocation registry on ledger. \n Question: Should the issuer wait? If the issuer should then this would be an async \n call, would it then go through the controller so that controller sends control message to \n the protocol on completion of async call or protocol can deal with async calls?
else do nothing 
end alt

p2 <-[#red] p1: <b>IssueCredential</b>(comment, credentials~attach: array[Attachment]) \n The data of attachment is same as in the issuer's previous control message 

p1 [#darkorange]-> c1: <b>IssuedCredential</b>

p2 [#green]-> p2: <b>IssuedCredential ⮕ <font color=purple>Issued
p2 [#darkorange]-> c2: <b>IssuedCredential</b>(comment: str, credentials_attach: array[Attachment])\n The data of attachment is same as in the previous protocol message 

group if issued credential is unacceptable (undesired attribute values), so decline
p2 <-[#blue] c2: <b>Decline</b>(problem_code="unacceptable_credential", explain: str)
p2 [#red]-> p1: <b>ProblemReport</b>(problem_code="unacceptable_credential", explain)
p2 [#darkorange]-> c2: <b>DeclinedCredential</b>
p1 [#green]-> p1: <b>CredentialDeclined ⮕ <font color=purple>DeclinedCredential
c1 <-[#darkorange] p1: <b>DeclinedCredential</b>(error: ProblemReport)
end

note over c2,c1
Assuming credential is acceptable to the Holder
end note

l <-[#teal] p1: <b>GetRevocationData(cred_def_id)</b> \n Fetch the revocation state from ledger \n Question: This is an async call, should the protocol deal with asycn calls? 
c2 [#blue]-> p2: <b>ValidateCredential</b>(schema: Schema, cred_def: CredDef, revocation_state: RevocationState) \n validate acceptable credential for cryptographic correctness
alt if issued credential is valid
p2 [#darkorange]-> c2: <b>ValidCredential</b>
p2 [#green]-> p2: <b>CredentialAccepted ⮕ <font color=purple>Accepted

p2 [#red]-> p1: <b>Ack</b>(status="OK")

p1 [#green]-> p1: <b>CredentialAccepted ⮕ <font color=purple>Accepted
p1 [#darkorange]-> c1: <b>CredentialAccepted

else Send error. The issuer can resend credential again.
p2 [#darkorange]-> c2: <b>InvalidCredential</b>(error: Error)
p2 [#green]-> p2: <b>CredentialInvalidated ⮕ <font color=purple>InvalidatedCredential
p2 [#red]-> p1: <b>ProblemReport</b>(problem_code="invalid_credential", explain)
p1 [#green]-> p1: <b>CredentialInvalidated ⮕ <font color=purple>InvalidatedCredential
c1 <-[#darkorange] p1: <b>CredentialInvalidated</b>(error: ProblemReport)

end alt

end alt

@enduml
