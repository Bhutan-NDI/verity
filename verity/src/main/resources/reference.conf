######################################################
# Verity Application Reference Config File          #
######################################################

akka {
  actor {

    # TODO: this 'java-serialization' is only turned 'on' to allow deserialization of
    # legacy/deprecated 'TransformedMultiEvents' (java serialized event)
    # once thread context migration is done, we can/should remove this config
    allow-java-serialization = on

    serializers {
      protoser = "com.evernym.verity.actor.serializers.ProtoBufSerializer"
      kryo-akka = "com.twitter.chill.akka.AkkaSerializer"
    }

    serialization-bindings {
      "com.evernym.verity.actor.PersistentMultiEventMsg" = protoser
      "com.evernym.verity.actor.PersistentEventMsg" = protoser
      "com.evernym.verity.actor.PersistentStateMsg" = protoser
      "com.evernym.verity.actor.PersistentMsg" = protoser
      "com.evernym.verity.actor.ActorMessage" = kryo-akka
    }

  }
  cluster.sharding {
    passivate-idle-entity-after = off
  }

  # this is used to know "Legacy" region actor names for "user-agent" and "user-agent-pairwise" actors
  sharding-region-name {
    user-agent = "VerityAgent"
    user-agent-pairwise = "VerityAgentPairwise"
  }

  http.server.parsing {
    max-uri-length             = 67k // 64k (for large invite URLs) + 2k buffer
  }
}

verity {
  agent {
    authentication {

      # determines if this feature is by default available or not
      enabled: false

      # map of 'domain-id' and their authorized keys
      keys {
        # provided keys will be available to agent belonging to given DID as key
        # examples:
        # domain-id-1: ["key1", "key2"]
        # domain-id-2: ["key3", "key4"]
      }
    }

    periodic-cleanup-scheduled-job {
      initial-delay-in-seconds = 60
      interval-in-seconds = 900
    }

    msg-store {
      # if below config is enabled (non commented), "seen messages" (see 'seenMsgStatusCode' in MsgState.scala)
      # older than below mentioned minutes would be removed from in-memory state
      # max-time-to-retain-seen-msgs-in-minutes: 5
    }

    actor-state-cleanup {

      # determines if fixing legacy agent route feature/utility is enabled or not
      # default value is false until we push a final change to make the whole flow working.
      enabled = true

      # there is a 'legacy router fix manager' actor (as a child of cluster singleton actor)
      # which uses below 'manager' configuration to decide it's behaviour.
      manager {

        # how many parallel 'agent route store' actors will be asked for registeration
        registration {
          batch-size = 20

          # this is to prevent hitting dynamodb too hard and impact the running service
          batch-item-sleep-interval-in-millis = 300
        }

        # how many max 'ActorStateCleanupExecutor' actor would be asked to start processing
        processor {
          batch-size = 1

          # this is to prevent hitting dynamodb too hard and impact the running service
          batch-item-sleep-interval-in-millis = 500
        }

        # scheduled job to orchestrating the processing
        scheduled-job {
          initial-delay-in-seconds = 10
          interval-in-seconds = 120
        }
      }

      # there is a 'ActorStateCleanupExecutor' actor (sharded actor, per one 'agent route store' actor)
      # which uses below 'executor' configuration to decide it's behaviour.
      executor {
        # how many max 'routes/agent-actors' would be processed parallely
        batch-size = 1

        # scheduled job to orchestrating the processing
        scheduled-job {
          initial-delay-in-seconds = 10
          interval-in-seconds = 60
        }
      }
    }

    migrate-thread-contexts {
      enabled = true

      batch-size = 50
      batch-item-sleep-interval-in-millis = 0

      scheduled-job {
        initial-delay-in-seconds = 10
        interval-in-seconds = 60
      }
    }
  }

  app-state-manager {
    state {
      initializing {
        max-retry-count = 10
        max-retry-duration = 240
      }
      draining {
        delay-before-leave = 90
        delay-between-status-checks = 1
        max-status-check-count = 20
      }
    }
  }

  cache {
    # expiration time for key value mapper actor's cached value, keep it default unless we know why we want to change
    key-value-mapper-cache-expiration-time-in-seconds = 300

    # expiration time for agent actor's config cached value, keep it default unless we know why we want to change
    agent-config-cache-expiration-time-in-seconds = 300

    # expiration time for ver key cached value, keep it default unless we know why we want to change
    get-ver-key-cache-expiration-time-in-seconds = 1800

    # expiration time for verity detail cached value, keep it default unless we know why we want to change
    agency-detail-cache-expiration-time-in-seconds = 1800
  }

  endpoint = {
    # agent msg rest api url path, keep default value
    path-prefix = "agency/msg"
  }

  http {
    # the interface to listen on, keep it default unless you have specific requirement to change it
    interface = "0.0.0.0"

    # the port to listen on for http requests, change as per environment/need
    port = 9000

    # the port to listen on for https requests, change as per environment/need
    # you can comment it if you DON'T want to start ssl binding on this server
    # ssl-port = 9443
  }

  internal-api {
    # The verity setup and health related rest api resources (mostly starting with /agency/internal/... etc)
    # will only be callable from the list of "allowed-from-ip-addresses" (CIDR notation) below.
    # Note that one of the health related api resources shows configuration details, which may contain
    # sensitive information.
    #
    # If allowed-from-ip-addresses is undefined or an empty, by default all "site local" (10 dot, 127 dot,
    # and 172 dot addresses) and loopback intefaces (usually 127.0.0.1) will be allowed. If you add even one
    # CIDR address to the list, you must enumerate all addresses. In other words, if you add 1.2.3.4/32 to the
    # list and you also want all site local and loopback addresses to be allowed, you will need to add the
    # site local and loopback CIDR addresses to the list. The defaults are NOT included if the list is not
    # empty.
    allowed-from-ip-addresses = ["127.0.0.1/32"]
  }

  item-container {

    scheduled-job {
      initial-delay-in-seconds = 60
      interval-in-seconds = 300
    }

    migration {
      chunk-size = 20
      check-result-history-size = 20
    }

  }

  # Unmaintained config. Used for https
  #keystore {
  #  # if you are running ssl-binding, then, provide path (relative to classpath) of .keystore file
  #  location = ".keystore"
  #
  #  # keystore file password
  #  password = "some-password"
  #  password = ${?KEYSTORE_PASSWORD}  //environment variable if set, override above value
  #}

  lib-indy {
    # library dir location which contains files like libindy.so, libmysqlstorage.so etc
    library-dir-location = "/usr/lib"
    library-dir-location = ${?LIB_INDY_LIBRARY_DIR_LOCATION}  //environment variable if set, override above value

    ledger {
      # it helps libindy keeping different pool configurations in different directory
      # whatever name you provide here, a directory with that name gets created under ~/.indy_client/pool/
      # keeping default should also be ok
      pool-name = "default_pool"

      # defines which indy node txn protocol version to be used
      txn-protocol-version = 2
      txn-protocol-version = ${?LIB_INDY_POOL_TXN_PROTOCOL_VERSION}

      transaction_author_agreement = {
        # Transaction Author Agreement
        # https://github.com/hyperledger/indy-sdk/blob/master/docs/how-tos/transaction-author-agreement.md
        #
        # When a Domain Ledger has a Transaction Author Agreement (TAA), configure the current version and any known future
        # versions of the TAA in the transaction_author_agreement configuration below. Each entry must be keyed off of the TAA
        # version and must contain:
        #
        #  - 'digest'
        #     A sha256 hash of the "<version><agreement text>" after trimming <version> and  <agreement text> of all leading and
        #     trailing whitespace. For example, sha256(1.0example TAA text) produces:
        #
        #     f8f50b0c2b7cef2d738cdc87a61fc95e789c80b8cfcb925df7367560500964d7
        #
        #  - 'mechanism'
        #    Verity should use 'on_file', but is configurable here in case the policy changes
        #
        #  - 'time-of-acceptance'
        #    Time of acceptance in yyyy-MM-dd format. You must predate future versions of the TAA with a
        #    time-of-acceptance that is on or after the announced go-live day for a future version. The Sovrin Foundation
        #    has proposed 24 hours before or after the go-live day. This will be configurable by the Sovrin Foundation.
        #    Whatever the Sovrin Foundation decides, it will be plus or minus the "TAA acceptance time valid deviations
        #    (secs)" as defined in indy-plenum:
        #    https://github.com/hyperledger/indy-plenum/blob/aae307ab6ea2c1b0dba4282736d5cfcf5accd28e/plenum/config.py#L410-L411
        #
        # There are several ways to get the current TAA version and text:
        #
        # Option 1: Attempt to bootstrap the verity and let it fail. The response JSON will contain the data you need to add
        # in transaction_author_agreement below. TODO: add verity URL used to bootstrap the Verity here
        #
        # Option 2: Use Indy CLI to get/review the version and text for the active TAA on the ledger
        # https://github.com/hyperledger/indy-sdk/blob/master/docs/how-tos/transaction-author-agreement.md#taa-acceptance-workflow
        # 1. Create and/or open a wallet
        # 2. Create and/or connect to the pool ledger. The TAA will be displayed during this process. Running `pool show-taa`
        #    after connecting to the pool is also an option.
        #
        # Option 3: Use indy-sdk API
        # https://github.com/hyperledger/indy-sdk/blob/master/docs/how-tos/transaction-author-agreement.md#user-get-aml-and-taa-set-on-the-ledger
        #
        # Example configuration version a version '1.0.0' with text 'TAA for agency-devlab ledger' would produce a
        # sha256(1.0.0TAA for agency-devlab ledger) hash of 3ae97ea501bd26b81c8c63da2c99696608517d6df8599210c7edaa7e2c719d65
        #
        # It is important to note that time-of-acceptance must be a date plus or minus the
        # "TAA acceptance time valid deviations (secs)" as defined in indy-plenum:
        # https://github.com/hyperledger/indy-plenum/blob/aae307ab6ea2c1b0dba4282736d5cfcf5accd28e/plenum/config.py#L410-L411
        #
        # agreements {
        #   "1.0" {
        #     "digest" = "3ae97ea501bd26b81c8c63da2c99696608517d6df8599210c7edaa7e2c719d65"
        #     "mechanism" = "on_file"
        #     "time-of-acceptance" = "2019-11-18"
        #   }
        # }
        agreements = {}

        #
        # This setting will cause the following to happen:
        # 1. Will get taa(text and version) from ledger on connection.
        # 2. Will require a matching agreement for the version on the ledger
        # 3. Check that digest is correct for the version
        #
        enabled = false
      }

      pool-config {
        # Defines the timeout to open a pool connection with the ledger AND perform any necessary initialization
        # (i.e. detect and handle the Transaction Author Agreement) of  the Indy Ledger pool connection manager instance
        # in Verity. This should be at least extended-timeout (see below) seconds, but will not be enforced, and will
        # default to 60 seconds if not defined.
        connection-manager-open-timeout = 80
        connection-manager-open-timeout = ${?LIB_INDY_POOL_CONN_MANAGER_OPEN_TIMEOUT}  //environment variable if set, override above value

        # Defines the pool timeout in seconds
        # See POOL_ACK_TIMEOUT in indy-sdk/libindy/src/domain/pool.rs
        # See indy-sdk/libindy/src/services/pool/pool.rs:
        #   Call to _get_request_handler_with_ledger_status_sent while in PoolState::Initialization state with a PoolEvent::CheckCache event
        #   Call to _get_f while in PoolState::GettingCatchupTarget state with a PoolEvent::CatchupTargetFound event
        #   Call to _get_request_handler_with_ledger_status_sent while in PoolState::Active state with a PoolEvent::Refresh event
        #   Call to _get_f while in PoolState::Active state with a PoolEvent::SendRequest event
        #   possibly more...
        timeout = 20
        timeout = ${?LIB_INDY_POOL_TIMEOUT}  //environment variable if set, override above value

        # Defines how long (in seconds) to extend a pool connection's timeout after receiving an ACK (reply) from events
        # processed by the connection. If no reply/ack is received in <extended-timeout> seconds, the pool connection is
        # closed/destroyed.
        # See POOL_REPLY_TIMEOUT in indy-sdk/libindy/src/domain/pool.rs
        # See indy-sdk/libindy/src/services/pool/networker.rs
        extended-timeout = 60
        extended-timeout = ${?LIB_INDY_POOL_EXTENDED_TIMEOUT}  //environment variable if set, override above value

        # Defines the max requests serviced by a pool connection before creating a new pool connection (growing the pool)
        # Pool connections handle <conn-limit> requests before the pool connection is destroyed. In other words, pool
        # connections are rolling (consumed) rather than pooling (reused).
        # See MAX_REQ_PER_POOL_CON in indy-sdk/libindy/src/domain/pool.rs
        conn-limit = 5
        conn-limit = ${?LIB_INDY_POOL_CONN_LIMIT}  //environment variable if set, override above value

        # Defines how long ZMQ polls for events on multiple sockets
        # See POOL_CON_ACTIVE_TO in indy-sdk/libindy/src/domain/pool.rs
        # ZMQ poll timeout. How long should the pool connection poll for events - See
        # indy-sdk/libindy/src/services/pool/pool.rs
        conn-active-timeout = 5
        conn-active-timeout = ${?LIB_INDY_POOL_CONN_ACTIVE_TIMEOUT}  //environment variable if set, override above value
      }
    }
  }

  logging.ignore-logger-filter.logger-name-contains = "FileUtil,LinuxOperatingSystem,LinuxDisks"

  metrics {

    activity-tracking {
      active-user {
        # Type=Duration -> Found at https://www.scala-lang.org/api/2.9.3/scala/concurrent/duration/Duration.html
        # This is a sliding window (+- timestamp) where the token is considered valid by Verity.
        # If expiration happens, requester will need to request a new token from their sponsor
        # Valid Units: `d, day, h, hour, min, minute, s, sec, second, ms, milli, millisecond, Âµs, micro, microsecond, ns, nano, nanosecond`
        # and their pluralized forms (for every but the first mentioned form of each unit, i.e. no "ds", but "days").
        time-windows = []
        # Monthly is not of type Duration so it can't go in the time-windows array. Monthly is handled a little differently in the code
        monthly-window = false
        enabled = false
      }

      active-relationships {
        # Type=Duration -> Found at https://www.scala-lang.org/api/2.9.3/scala/concurrent/duration/Duration.html
        # This is a sliding window (+- timestamp) where the token is considered valid by Verity.
        # If expiration happens, requester will need to request a new token from their sponsor
        # Valid Units: `d, day, h, hour, min, minute, s, sec, second, ms, milli, millisecond, Âµs, micro, microsecond, ns, nano, nanosecond`
        # and their pluralized forms (for every but the first mentioned form of each unit, i.e. no "ds", but "days").
        time-windows = []
        # Monthly is not of type Duration so it can't go in the time-windows array. Monthly is handled a little differently in the code
        monthly-window = false
        enabled = false
      }
    }

    latency-recording {
      histogram { enabled: false }
      span      { enabled: true }
    }
  }

  msg-template {
    # this is invitation url returned to invitation sender to be used for later purposes
    # this url is also being used by app to fetch invitation detail and show to invitee
    sms-msg-template-invite-url = "#{baseUrl}/agency/invite?t=#{token}"

    # this template is used to build sms content which we want to send to invitee
    sms-msg-template-offer-conn-msg = "#{requesterName} would like you to install Connect-Me for greater identity verification: #{appUrlLink}"

    # template by which deeplink urls are built
    sms-offer-template-deeplink-url = "https://connectme.app.link?t=#{token}"

    agent-specific {
      # provided specific overrides for agents specified by given domainDID

      # example:
      # <domain-id-1>: {
      #   sms-msg-template-offer-conn-msg = "#{requesterName} would like to connect with you. #{appUrlLink}"
      #   sms-offer-template-deeplink-url = "https://masterpass.app.link?t=#{token}"
      # }
    }

  }

  msgs {
    # default value for connection request expiration time in seconds
    # specific enterprise agent then can update its own agent configuration to override this
    conn-req-expiration-time-in-seconds = 300
  }

  # If below config is enabled (non commented), a custom thread pool will be created and used for all futures.
  # Else, the scala provided 'global' executor will be used.
  # future-thread-pool-size: 2000
  persistence {
    use-async-for-msg-forward-feature: false
  }

  # This is used to identify anyone who provisions
  provisioning {
    # sponsors:
    # name: The name of the Sponsor who endorses the provisioning .
    # id: An ID which will not change. Keys cannot be used because of rotation possibilities.
    # keys: VerKey used to sign the token. This can be expanded in the future.
    # endpoint: Endpoint where HTTP message will be sent. Sponsor's backend can deliver to the app however they want.
    # active: boolean if sponsor has an active status with Evernym
    sponsors = []
    # Boolean -> some use cases will not what to deal with tokens such as veritysdk.
    sponsor-required = false
    # Type=Duration -> Found at https://www.scala-lang.org/api/2.9.3/scala/concurrent/duration/Duration.html
    # This is a sliding window (+- timestamp) where the token is considered valid by Verity.
    # If expiration happens, requester will need to request a new token from their sponsor
    # Valid Units: `d, day, h, hour, min, minute, s, sec, second, ms, milli, millisecond, Âµs, micro, microsecond, ns, nano, nanosecond`
    # and their pluralized forms (for every but the first mentioned form of each unit, i.e. no "ds", but "days").
    token-window = 10 minute
  }

  rest-api {
    # This enables the REST endpoint ('<server>/api')
    # If this is set to false, http will respond with 501 Not Implemented
    enabled = false
  }

  services {
    sms-service {
      external-services {
        open-market {
          endpoint {
            host = "servicemanager.openmarket.com" # this does not seem like a good default value
            port = "443" # this does not seem like a good default value
            path-prefix = "service/v1/invokeService" # this does not seem like a good default value
          }
        }
      }
    }
  }

  user-agent-pairwise-actor {
    scheduled-job {
      initial-delay-in-seconds = 60
      interval-in-seconds = 300
    }
  }

  user-agent-pairwise-watcher {
    version = "v4"

    enabled = true

    scheduled-job {
      initial-delay-in-seconds = 60
      interval-in-seconds = 200
    }
  }

  # this section covers configuration for any persistent actors
  # it might be based on actor categories, entity type/name or entity id.
  persistent-actor {

    base {                                     # for base persistent actor category
      # receive-timeout-seconds = 600          # applicable to all base persistent actor unless overridden specifically

      AgencyAgent {                            # entity type/name (like AgencyAgent, UserAgent etc)
        # receive-timeout-seconds = 800        # applicable to all entity of type "AgencyAgent" unless overridden specifically

        # entity-id-1 {                        # application to only "AgencyAgent-entity-id-1" actor
        #   receive-timeout-seconds = 1000
        # }

        # TODO: make sure we are ok with corresponding 'state' proto buf message strucutre
        # before enabling the snapshot
        # TODO: finalize and enable configurations in this below 'snapshot' section
        # when we want to enable snapshots for 'AgencyAgent'
        # snapshot {
          # after-n-events = 1
          # keep-n-snapshots = 2
          # delete-events-on-snapshots = true
        # }
      }

      AgencyAgentPairwise {                    # entity type/name
        # receive-timeout-seconds = 800        # applicable to all entity of type "AgencyAgentPairwise" unless overridden specifically

        # entity-id-1 {                        # application to only "AgencyAgentPairwise-entity-id-1" actor
        #   receive-timeout-seconds = 1000
        # }

        # TODO: make sure we are ok with corresponding 'state' proto buf message strucutre
        # before enabling the snapshot
        # TODO: finalize and enable configurations in this below 'snapshot' section
        # when we want to enable snapshots for 'AgencyAgentPairwise'
        # snapshot {
          # after-n-events = 1
          # keep-n-snapshots = 2
          # delete-events-on-snapshots = true
        # }
      }
    }

    # protocol-container {                     # applicable to all protocol container actors
      # similar structure as shown under 'base' category above
    # }

    # singleton-children {                     # for singleton children actor category
      # similar structure as shown under 'base' category above
    # }
  }
}

kamon {
  modules.jaeger.enabled = false
  modules.status-page.enabled = false
}

  ######################################################
  # [END] Verity Applicationd Reference Config File    #
  ######################################################