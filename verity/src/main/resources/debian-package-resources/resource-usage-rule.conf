verity {

  resource-usage-rules {

    # NOTE: configure below as per the environment and use cases

    # if true, verity will start capturing usages (of endpoints and/or messages)
    # and execute violation action if actual usages exceeds allowed counts
    apply-usage-rules = true

    usage-rules {

      //when no specific rule matches, this 'default' rule will be applied
      //all bucket keys (like 300, 600, 1200 etc are in seconds)
      default {

        //this is to control different 'endpoint' usages
        endpoint {

          //when no specific endpoint matches, this will be applied
          default {
            300: {"allowed-counts": 100, "violation-action-id": 50}
            600: {"allowed-counts": 200, "violation-action-id": 70}
            1200: {"allowed-counts": 400, "violation-action-id": 90}
          }

          POST_agency_msg {
            300: {"allowed-counts": 100, "violation-action-id": 50}
            600: {"allowed-counts": 200, "violation-action-id": 70}
            1200: {"allowed-counts": 700, "violation-action-id": 90}
          }
        }

        //this is to control internal messages exchanged via one or different endpoints
        message {

          default {
            300: {"allowed-counts": 100, "violation-action-id": 50}
            600: {"allowed-counts": 200, "violation-action-id": 70}
            1200: {"allowed-counts": 400, "violation-action-id": 90}
          }

          "connecting/CREATE_MSG_connReq" {
            300: {"allowed-counts": 30, "violation-action-id": 50}
            600: {"allowed-counts": 80, "violation-action-id": 70}
            1800: {"allowed-counts": 300, "violation-action-id": 90}
          }
        }

      }

    }

    # each action mentioned below (with different ids like 50, 70 etc)
    # is composed of different instructions with associated key value map
    # supported instructions as of now are "log-msg", "warn-resource", "block-resource" and "block-entity"
    violation-action {

      # suspicious, log it
      50 {
        log-msg: {"level": "info"}
        warn-resource: {"entity-types": "ip", "period": 600}
      }

      # log it and block only resource
      70 {
        log-msg: {"level": "info"}
        warn-entity: {"entity-types": "ip", "period": 1200}
        block-resource: {"entity-types": "ip", "period": 600}
      }

      # log and block user from using any api (-1 indicates blocked indefinitely)
      # once blocked for indefinite time, it can be only manually unblocked by hitting
      # respective api calls (those are internal apis)
      90 {
        log-msg: {"level": "info"}
        block-entity: {"entity-types": "ip", "period": -1}
      }

    }

    # assign tokens to a rule which should be applied to it
    # token can be client ip addresses or special tokens assigned to them
    rule-to-tokens {
      default: []
    }

    # tokens you want to configure as blacklisted (doesn't matter from which ip address those requests are coming)
    blacklisted-tokens = []

    # tokens you want to configure as whitelisted (doesn't matter from which ip address those requests are coming)
    # this would be specially useful when you want to trust some remote agent
    # for example, for enterprise agent, you'll expect messages from consumer agent and vice versa
    # so you can put those ip address in this config so that they doesn't get blocked unnecessarily
    whitelisted-tokens = []

  }

}
