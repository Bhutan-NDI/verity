include "sms-client.conf"
include "sms-server.conf"
include "lib-indy.conf"
include "salt.conf"
include "secret.conf"
include "wallet-storage.conf"
include "metrics.conf"
include "resource-usage-rule-spec.conf"
include "alpakka.conf"
include "push-notif.conf"
include "url-mapper-server.conf"
include "url-mapper-client.conf"

verity {
  lib-indy.ledger.genesis-txn-file-location = "verity/src/test/resources/genesis.txt"
  lib-indy.ledger.genesis-txn-file-location = ${?GENESIS_TXN_FILE_LOCATION}

  domain-url-prefix = "http://localhost:9000"

  endpoint = {
    # provide ip address which is reachable by outside world
    host = "localhost"

    # this would be same as http.port
    port = ${verity.http.port}
  }

  services {

    # this is all push notification related configuration, only required if configuring consumer agent service
    # keep default value of most except 'default-logo-url'
    push-notif-service = {
      general-msg-title-template = "Hi #{targetName}"
      general-new-msg-body-template = "#{senderName} sent you #{msgType}"
      error-resp-msg-body-template = "#{senderName} responded with error (detail: uid -> #{uid}, msg type -> #{msgType})"

      default-sender-name = "Remote connection"

      # if any error response is reported from remote agent (enterprise agent), it is being notified to user via push notification
      # that time, consumer agent uses this logo url which app renders it
      # this is also used if at all consumer agent receives a msg from remote agent without its logo url
      default-logo-url = "https://robohash.org/234"

      fcm {
        host = "fcm.googleapis.com"
        path = "/fcm/send"

        # this is firebase push notification serve key which you might/would have configured
        # so that CAS to be able to send push notifications to connect.me app
        key = "AAAAMz4rOdM:APA91bE-TPbHE12RmnT-34HSQjDoUNqBGCiSeX2HoB-JNmJgBjNc_JZ4Q3Iu0AefRd6eN13ly5CX95QcFS3vNZ7Ba2pDoQUqOowJB6QJQPUO_nqkosP8XKmRyFgmEJGJpNLqU4fmSmKP"
      }
    }
    url-mapper-service {

      msg-template {
        # template by which shortened url is build
        connect-me-mapped-url-template = "https://connectme.app.link?t=#{token}"
      }
    }
  }

  app-state-manager {
    state {
      initializing {
        max-retry-count = 10
        max-retry-duration = 240
      }
      draining {
        delay-before-leave = 1
        delay-between-status-checks = 0.1
        max-status-check-count = 20
      }
    }
  }


  user-agent-pairwise-actor {
    scheduled-job {
      initial-delay-in-seconds = 5
      interval-in-seconds = 30
    }
  }

  user-agent-pairwise-watcher {
    enabled = true

    scheduled-job {
      initial-delay-in-seconds = 5
      interval-in-seconds = 300
    }
  }

  item-container {

    scheduled-job {
      initial-delay-in-seconds = 5
      interval-in-seconds = 60
    }

    migration {
      chunk-size = 5
    }

  }


  lib-indy.wallet.type = "default"
  libvcx {
    enable_test_mode = true
    institution_name = "Acme"
  }
}

akka {
  cluster {
    seed-nodes = [
      "akka://verity@localhost:2551"
    ]
  }
}

verity {
  rest-api {
    enabled = false
  }
}

# NOTE: akka.test section is to configure client side timeouts
akka {
  test {
    single-expect-default = 5s
  }

  sharding-region-name {
    user-agent = "UserAgent"
    user-agent-pairwise = "UserAgentPairwise"
  }

}

# NOTE: verity.timeout section is to configure server side timeouts
verity {
  test {
    http-route-timeout-in-seconds = 20
  }
  timeout {
    general-actor-ask-timeout-in-seconds = 10
    general-actor-ref-resolve-timeout-in-seconds = 10
  }
}

verity {
  # Documentation in reference.conf
  retention-policy {
    default {
      undefined-fallback = 360 days
    }
  }
}

verity.blob-store {
  bucket-name = "blob-store"
  storage-service = "com.evernym.verity.storage_services.leveldb.LeveldbAPI"
  local-store-path = "/tmp/verity/leveldb"
}

verity.provisioning {
  sponsors = [
    {
      name = "test-sponsor"
      id = "test-sponsorabc123"
      keys = [{"verKey":"test-sponsor456def8910"}]
      endpoint = "test-sponsorgoogle.com"
      active = false
    },
    {
      name = "inactive-sponsor-name"
      id = "inactive-sponsor-id"
      keys = [{"verKey": "GJ1SzoWzavQYfNL9XkaJdrQejfztN4XqdsiV4ct3LXKL"}]
      endpoint = "localhost:3456/json-msg"
      active = false
    },
    {
      name = "evernym-test-sponsor"
      id = "evernym-test-sponsorabc123"
      keys = [{"verKey": "GJ1SzoWzavQYfNL9XkaJdrQejfztN4XqdsiV4ct3LXKL"}]
      endpoint = "localhost:3456/json-msg"
      active = true
    }
  ]
  sponsor-required = false
  token-window = 10 minute
  cache-used-tokens = true
}

verity {
  agent {
    authentication {

      # determines if this feature is by default available or not
      enabled: true

      # map of domainIds and their authorized keys
      keys {
        # provided keys will be available to agent belonging to given DID as key
        domain-id-1: ["key1", "key2"]
      }
    }
  }
}

verity {
  services {
    push-notif-service = {
      # mock cloud messaging, by default turned off, it is only used during integration test
      mcm {
        enabled: true
      }
    }
  }
}


verity {
  services.push-notif-service.enabled = true

  url-mapper-api {
    enabled = true
  }
}

verity.services {
  push-notif-service {
    # mock cloud messaging
    mcm {
      send-messages-to-endpoint = true
    }
  }
}

verity {
  cache {
    agency-detail.expiration-time-in-seconds = 0
  }
}

verity {
  agent {
    actor-state-cleanup {
      enabled = false
    }
    migrate-thread-contexts {
      enabled = false
    }
  }
}

kamon {
  # increase tick interval for tests to reduce waiting time for metrics to be reported
  metric.tick-interval = 1 second
}